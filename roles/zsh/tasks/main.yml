- name: "Get home directory"
  ansible.builtin.set_fact:
    home_dir: "{{ lookup('env', 'HOME') }}"
- name: "Install Oh My ZSH"
  ansible.builtin.shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
  args:
    creates: "/Users/{{ lookup('env', 'USER') }}/.oh-my-zsh"
  changed_when: false
- name: "Set ZSH as the default shell"
  ansible.builtin.user:
    name: "{{ lookup('env', 'USER') }}"
    shell: "/bin/zsh"
  become: true
  register: shell_change
  failed_when: false
  changed_when: shell_change.changed
- name: "Fix permissions for zsh"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: g-w,o-w
  become: true
  loop:
    - /usr/local/share/zsh/site-functions
    - /usr/local/share/zsh
  failed_when: false
- name: "Change ~/.zshrc plugins"
  ansible.builtin.replace:
    dest: ~/.zshrc
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
    mode: "0644"
  loop:
    - regexp: '^plugins=.*'
      replace: plugins=(colored-man-pages dirhistory docker git history vagrant-prompt kubectl)
- name: "Add commands to ~/.zshrc"
  ansible.builtin.blockinfile:
    dest: ~/.zshrc
    block: |
      #set history size
      export HISTSIZE=50000
      #save history after logout
      export SAVEHIST=10000
      #save only one command if 2 common are same and consistent
      setopt HIST_IGNORE_ALL_DUPS
      #add timestamp for each entry
      setopt EXTENDED_HISTORY
      # Do not share history between sessions (like bash)
      setopt NO_SHARE_HISTORY
      # Remove the quarantine flag when it installs a package
      export HOMEBREW_CASK_OPTS="--no-quarantine"
      # Use bat for the brew cat command
      export HOMEBREW_BAT=1
      # Cleanup all cached files older than this many days
      export HOMEBREW_CLEANUP_MAX_AGE_DAYS=7
      # Fail on the failure of installation from a bottle rather than falling back to building from source
      export HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK=1
      alias dos2unix="sed -i 's/\r$//' "
      alias unix2dos="awk 'sub(\"$\",\"\r\")' "
      alias md5sum_dir="rhash --md5 --recursive --percents --output=md5sum.md5 ."
      alias chrome="open -a 'Google Chrome'"
      alias k=kubectl
      # This command is used a LOT both below and in daily life
      alias k=kubectl
      # Execute a kubectl command against all namespaces
      alias kca='f(){ kubectl "$@" --all-namespaces;  unset -f f; }; f'
      # Apply a YML file
      alias kaf='kubectl apply -f'
      # Drop into an interactive terminal on a container
      alias keti='kubectl exec -ti'
      # Manage configuration quickly to switch contexts between local, dev ad staging.
      alias kcuc='kubectl config use-context'
      alias kcsc='kubectl config set-context'
      alias kcdc='kubectl config delete-context'
      alias kccc='kubectl config current-context'
      # List all contexts
      alias kcgc='kubectl config get-contexts'
      # General aliases
      alias kdel='kubectl delete'
      alias kdelf='kubectl delete -f'
      # Pod management.
      alias kgp='kubectl get pods'
      alias k="kubectl "
      alias kg="k get "
      alias po="kg po "
      alias ke="k edit"
      alias kd="k describe "
      alias pod="kd po "
      alias kc="k create "
      alias no="kg nodes "
      alias ka="k apply -f "
      alias krm="kubectl delete -f "
      alias kssh="kubectl exec -it "
      alias kgpw='kgp --watch'
      alias kgpwide='kgp -o wide'
      alias kep='kubectl edit pods'
      alias kdp='kubectl describe pods'
      alias kdelp='kubectl delete pods'
      # get pod by label: kgpl "app=myapp" -n myns
      alias kgpl='kgp -l'
      # Service management.
      alias kgs='kubectl get svc'
      alias ks="kubectl get svc "
      alias kgsw='kgs --watch'
      alias kgswide='kgs -o wide'
      alias kes='kubectl edit svc'
      alias kds='kubectl describe svc'
      alias kdels='kubectl delete svc'
      # Ingress management
      alias kgi='kubectl get ingress'
      alias kei='kubectl edit ingress'
      alias kdi='kubectl describe ingress'
      alias kdeli='kubectl delete ingress'
      # Namespace management
      alias kgns='kubectl get namespaces'
      alias kens='kubectl edit namespace'
      alias kdns='kubectl describe namespace'
      alias kdelns='kubectl delete namespace'
      alias kcn='kubectl config set-context $(kubectl config current-context) --namespace'
      # ConfigMap management
      alias kgcm='kubectl get configmaps'
      alias kecm='kubectl edit configmap'
      alias kdcm='kubectl describe configmap'
      alias kdelcm='kubectl delete configmap'
      # Secret management
      alias kgsec='kubectl get secret'
      alias kdsec='kubectl describe secret'
      alias kdelsec='kubectl delete secret'
      # Deployment management.
      alias kgd='kubectl get deployment'
      alias kgdw='kgd --watch'
      alias kgdwide='kgd -o wide'
      alias ked='kubectl edit deployment'
      alias kdd='kubectl describe deployment'
      alias kdeld='kubectl delete deployment'
      alias ksd='kubectl scale deployment'
      alias krsd='kubectl rollout status deployment'
      kres(){
          kubectl set env $@ REFRESHED_AT=$(date +%Y%m%d%H%M%S)
      }
      # Rollout management.
      alias kgrs='kubectl get rs'
      alias krh='kubectl rollout history'
      alias kru='kubectl rollout undo'
      # Port forwarding
      alias kpf="kubectl port-forward"
      # Tools for accessing all information
      alias kga='kubectl get all'
      alias kgaa='kubectl get all --all-namespaces'
      # Logs
      alias kl='kubectl logs'
      alias klf='kubectl logs -f'
      # File copy
      alias kcp='kubectl cp'
      # Node Management
      alias kgno='kubectl get nodes'
      alias keno='kubectl edit node'
      alias kdno='kubectl describe node'
      alias kdelno='kubectl delete node'
      # Helm Management
      alias hi="helm install "
      alias hu="helm uninstall "
      alias hl="helm list "
      alias hs="helm status "
      trash() { mv -fv "$@" ~/.Trash/ ; }
      DISABLE_AUTO_UPDATE="true"
      COMPLETION_WAITING_DOTS="true"
      HIST_STAMPS="yyyy-mm-dd"
      # Always reply Yes and automatically upgrade oh-my-zsh
      DISABLE_UPDATE_PROMPT=true
      # export ASDF
      . $HOME/.asdf/asdf.sh
      . $HOME/.asdf/completions/asdf.bash
      . $HOME/.asdf/plugins/golang/set-env.zsh
      export ASDF_GOLANG_MOD_VERSION_ENABLED="true"
      ## Custom Alias
      alias python='python3'
      alias dns_cleanup="sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder"
      alias awslocal="aws --endpoint-url=http://localhost:4566"
      alias assume_role='. {{ home_dir }}/src/scalis/devops/devops-swiss-knife/assumeRole/main.sh'
      alias k8s='. {{ home_dir }}/src/scalis/devops/devops-swiss-knife/k8sctx/main.sh'
      alias clean_dns="sudo dscacheutil -flushcache"
      alias get_pr='. {{ home_dir }}/src/scalis/devops/devops-swiss-knife/git/get_pr.sh'
      alias get_unstaged="git --no-pager diff"
      alias get_staged="git --no-pager diff --staged"
      alias aws_dev="export AWS_PROFILE=scalis-development && export AWS_REGION=us-east-2"
      alias aws_legacy="export AWS_PROFILE=scalis && export AWS_REGION=us-east-2"
      alias aws_prod="export AWS_PROFILE=scalis-production && export AWS_REGION=us-east-2"
      alias aws_stg="export AWS_PROFILE=scalis-staging && export AWS_REGION=us-east-2"
      alias k8s_dev="export KUBECONFIG={{ home_dir }}/.kube/development"
      alias k8s_prod="export KUBECONFIG={{ home_dir }}/.kube/production"
      alias k8s_stg="export KUBECONFIG={{ home_dir }}/.kube/staging"
      alias k8s_lab="export KUBECONFIG={{ home_dir }}/.kube/lab"
      eval $(thefuck --alias)
      export PATH="/opt/homebrew/opt/libpq/bin:$PATH"